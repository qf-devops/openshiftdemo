
Overview
* Kind: HelloWorld
* Group: demo.example.com
* Version: v1
* Spec Field: message â€“ the custom greeting message.
* Controller: Prints "Hello from: <message>" to the logs.

 1.  Kubebuilder

kubebuilder init --domain example.com --repo github.com/yourname/helloworld-operator
kubebuilder create api --group demo --version v1 --kind HelloWorld
This creates the directory structure and boilerplate.

2. Define the API (CRD Type)

helloworld_types.go:

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// HelloWorldSpec defines the desired state of HelloWorld
type HelloWorldSpec struct {
	Message string `json:"message,omitempty"`
}

// HelloWorldStatus defines the observed state of HelloWorld
type HelloWorldStatus struct {
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// HelloWorld is the Schema for the helloworlds API
type HelloWorld struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   HelloWorldSpec   `json:"spec,omitempty"`
	Status HelloWorldStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HelloWorldList contains a list of HelloWorld
type HelloWorldList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HelloWorld `json:"items"`
}

 3. Implement Controller Logic
Edit controllers/helloworld_controller.go:


package controllers

import (
	"context"
	"fmt"

	"github.com/go-logr/logr"
	demov1 "github.com/yourname/helloworld-operator/api/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// HelloWorldReconciler reconciles a HelloWorld object
type HelloWorldReconciler struct {
	client.Client
	Log logr.Logger
}

//+kubebuilder:rbac:groups=demo.example.com,resources=helloworlds,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=demo.example.com,resources=helloworlds/status,verbs=get;update;patch

func (r *HelloWorldReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := r.Log.WithValues("helloworld", req.NamespacedName)

	// Fetch the HelloWorld instance
	var hw demov1.HelloWorld
	if err := r.Get(ctx, req.NamespacedName, &hw); err != nil {
		if errors.IsNotFound(err) {
			log.Info("HelloWorld resource not found. Ignoring since object must be deleted.")
			return ctrl.Result{}, nil
		}
		log.Error(err, "Failed to get HelloWorld")
		return ctrl.Result{}, err
	}

	log.Info(fmt.Sprintf("Hello from: %s", hw.Spec.Message))
	return ctrl.Result{}, nil
}

func (r *HelloWorldReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&demov1.HelloWorld{}).
		Complete(r)
}

4. Generate Manifests

make generate
make manifests

5. Build and Deploy Operator

make docker-build docker-push IMG=your-dockerhub/helloworld-operator:v0.1.0
make deploy IMG=your-dockerhub/helloworld-operator:v0.1.0

6. Create a HelloWorld Resource
Apply this YAML:

apiVersion: demo.example.com/v1
kind: HelloWorld
metadata:
  name: sample-hello
spec:
  message: "Kubernetes World!"


Apply it:
kubectl apply -f config/samples/demo_v1_helloworld.yaml

7. Check Controller Logs

kubectl logs -l control-plane=controller-manager -n helloworld-system -c manager

"Hello from: Kubernetes World!"

